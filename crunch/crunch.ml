(*
 * Copyright (c) 2009 Anil Madhavapeddy <anil@recoil.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *)

open Unix

(* wrapper for realpath(2) *)
external realpath : string -> string = "unix_realpath"

(* repeat until End_of_file is raised *)
let repeat_until_eof fn =
   try while true do fn () done
   with End_of_file -> ()

(* Retrieve file extension , if any, or blank string otherwise *)
let get_extension ~filename =
  let rec search_dot i =
    if i < 1 || filename.[i] = '/' then None
    else if filename.[i] = '.' then Some (String.sub filename (i+1) (String.length filename - i - 1))
    else search_dot (i - 1) in
  search_dot (String.length filename - 1)

(* Walk directory and call walkfn on every file that matches extension ext *)
let walk_directory_tree ?ext walkfn root_dir =
  let rec walk dir =
    let dh = opendir dir in
    repeat_until_eof (fun () ->
      match readdir dh with
      | "." | ".." -> ()
      | f ->
          let n = Filename.concat dir f in
          if Sys.is_directory n then walk n
          else
            (match (get_extension f), ext with
            | (_, None) -> walkfn root_dir (String.sub n 2 (String.length n - 2))
            | (Some e, Some e') when e = e'  -> walkfn root_dir (String.sub n 2 (String.length n - 2))
            | _ -> ())
    );
    closedir dh in
  chdir root_dir;
  walk "."

open Arg
open Printf

let output_header () =
  printf "(* This file has been autogenerated by %s *)\n" Sys.argv.(0);
  printf "let t = function\n"

let output_file root name =
  printf " | \"%s\" -> Some \"" (String.escaped name);
  let fin = open_in (Filename.concat root name) in
  repeat_until_eof (fun () -> print_endline (String.escaped (input_line fin)));
  close_in fin;
  printf "\"\n"

let output_footer () =
  printf " | _ -> None\n"

let _ =
  let dirs = ref [] in
  let ext = ref None in
  let spec = [("-ext", String (fun e -> ext := Some e), "filter only these extensions")] in
  parse spec (fun s -> dirs := (realpath s) :: !dirs) 
    (sprintf "Usage: %s [-ext <filter extension>] <dir1> <dir2> ..." Sys.argv.(0));
  let ext = !ext in
  output_header ();
  List.iter (walk_directory_tree ?ext output_file) !dirs;
  output_footer ()
